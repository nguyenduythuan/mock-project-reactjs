var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _templateObject = _taggedTemplateLiteral(["\n      > div {\n        &:first-child {\n          height: ", "px !important;\n        }\n        &:nth-child(n+", ") {\n          width: 75% !important;\n        }\n      }\n    "], ["\n      > div {\n        &:first-child {\n          height: ", "px !important;\n        }\n        &:nth-child(n+", ") {\n          width: 75% !important;\n        }\n      }\n    "]);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React, { Component } from "react";
import PropTypes from "prop-types";
import styled from "styled-components";

import Bone from "../Bone";
import Skull from "../Skull";

var skeletonFlexRowStyle = {
  display: 'flex',
  flexDirection: 'row'
};

var boneFlexRowStyle = {
  display: 'flex',
  flexDirection: 'column',
  justifyContent: 'flex-end',
  width: '90%',
  marginLeft: '15px'
};

/** The Skeleton can be used to dynamically generate bones.  */

var Skeleton = function (_Component) {
  _inherits(Skeleton, _Component);

  function Skeleton() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Skeleton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Skeleton.__proto__ || Object.getPrototypeOf(Skeleton)).call.apply(_ref, [this].concat(args))), _this), _this.getAnimation = function () {
      return _this.props.animate ? 'blink' : '';
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Skeleton, [{
    key: "render",
    value: function render() {
      var Bones = styled.div(_templateObject, this.props.bigBone ? 30 : 15, this.props.amount > 1 ? this.props.amount : null);
      var _props = this.props,
          skull = _props.skull,
          amount = _props.amount,
          direction = _props.direction;

      var skeleton = [];
      var bones = [];
      if (skull) {
        skeleton.push(React.createElement(Skull, { key: '0-0' }));
      }
      for (var i = 0; i < amount; i++) {
        bones.push(React.createElement(Bone, { key: i }));
      }
      return React.createElement(
        "div",
        { className: this.getAnimation(), style: direction === 'row' ? skeletonFlexRowStyle : null },
        React.createElement(
          "div",
          null,
          skeleton
        ),
        React.createElement(
          Bones,
          { style: direction === 'row' ? boneFlexRowStyle : null },
          bones
        )
      );
    }
  }]);

  return Skeleton;
}(Component);

Skeleton.propTypes = {
  /** Show Skull */
  skull: PropTypes.bool,
  /** Amount of Bones */
  amount: PropTypes.number,
  /** With Big Bone header */
  bigBone: PropTypes.bool,
  /** Fade Bones in and out  */
  animate: PropTypes.bool,
  /** Column or Row   */
  direction: PropTypes.oneOf(['column', 'row'])
};

Skeleton.defaultProps = {
  skull: false,
  amount: 1,
  bigBone: false,
  animate: true,
  direction: 'column'
};

export default Skeleton;